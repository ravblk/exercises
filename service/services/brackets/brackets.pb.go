// Code generated by protoc-gen-go. DO NOT EDIT.
// source: brackets.proto

/*
Package brackets is a generated protocol buffer package.

It is generated from these files:
	brackets.proto

It has these top-level messages:
	Brackets
	ResultValidateBrackets
	ResultFixBrackets
*/
package brackets

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Brackets struct {
	Brackets string `protobuf:"bytes,1,opt,name=Brackets,json=brackets" json:"Brackets,omitempty"`
}

func (m *Brackets) Reset()                    { *m = Brackets{} }
func (m *Brackets) String() string            { return proto.CompactTextString(m) }
func (*Brackets) ProtoMessage()               {}
func (*Brackets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Brackets) GetBrackets() string {
	if m != nil {
		return m.Brackets
	}
	return ""
}

type ResultValidateBrackets struct {
	ResultValidate string `protobuf:"bytes,1,opt,name=ResultValidate,json=resultValidate" json:"ResultValidate,omitempty"`
}

func (m *ResultValidateBrackets) Reset()                    { *m = ResultValidateBrackets{} }
func (m *ResultValidateBrackets) String() string            { return proto.CompactTextString(m) }
func (*ResultValidateBrackets) ProtoMessage()               {}
func (*ResultValidateBrackets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResultValidateBrackets) GetResultValidate() string {
	if m != nil {
		return m.ResultValidate
	}
	return ""
}

type ResultFixBrackets struct {
	ResultFix string `protobuf:"bytes,1,opt,name=ResultFix,json=resultFix" json:"ResultFix,omitempty"`
}

func (m *ResultFixBrackets) Reset()                    { *m = ResultFixBrackets{} }
func (m *ResultFixBrackets) String() string            { return proto.CompactTextString(m) }
func (*ResultFixBrackets) ProtoMessage()               {}
func (*ResultFixBrackets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResultFixBrackets) GetResultFix() string {
	if m != nil {
		return m.ResultFix
	}
	return ""
}

func init() {
	proto.RegisterType((*Brackets)(nil), "Brackets")
	proto.RegisterType((*ResultValidateBrackets)(nil), "ResultValidateBrackets")
	proto.RegisterType((*ResultFixBrackets)(nil), "ResultFixBrackets")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BracketsService service

type BracketsServiceClient interface {
	Validate(ctx context.Context, in *Brackets, opts ...grpc.CallOption) (*ResultValidateBrackets, error)
	Fix(ctx context.Context, in *Brackets, opts ...grpc.CallOption) (*ResultFixBrackets, error)
}

type bracketsServiceClient struct {
	cc *grpc.ClientConn
}

func NewBracketsServiceClient(cc *grpc.ClientConn) BracketsServiceClient {
	return &bracketsServiceClient{cc}
}

func (c *bracketsServiceClient) Validate(ctx context.Context, in *Brackets, opts ...grpc.CallOption) (*ResultValidateBrackets, error) {
	out := new(ResultValidateBrackets)
	err := grpc.Invoke(ctx, "/BracketsService/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bracketsServiceClient) Fix(ctx context.Context, in *Brackets, opts ...grpc.CallOption) (*ResultFixBrackets, error) {
	out := new(ResultFixBrackets)
	err := grpc.Invoke(ctx, "/BracketsService/Fix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BracketsService service

type BracketsServiceServer interface {
	Validate(context.Context, *Brackets) (*ResultValidateBrackets, error)
	Fix(context.Context, *Brackets) (*ResultFixBrackets, error)
}

func RegisterBracketsServiceServer(s *grpc.Server, srv BracketsServiceServer) {
	s.RegisterService(&_BracketsService_serviceDesc, srv)
}

func _BracketsService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brackets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BracketsServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BracketsService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BracketsServiceServer).Validate(ctx, req.(*Brackets))
	}
	return interceptor(ctx, in, info, handler)
}

func _BracketsService_Fix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brackets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BracketsServiceServer).Fix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BracketsService/Fix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BracketsServiceServer).Fix(ctx, req.(*Brackets))
	}
	return interceptor(ctx, in, info, handler)
}

var _BracketsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BracketsService",
	HandlerType: (*BracketsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _BracketsService_Validate_Handler,
		},
		{
			MethodName: "Fix",
			Handler:    _BracketsService_Fix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brackets.proto",
}

func init() { proto.RegisterFile("brackets.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2a, 0x4a, 0x4c,
	0xce, 0x4e, 0x2d, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe3, 0xe2, 0x70, 0x82,
	0x8a, 0x08, 0x49, 0x21, 0xd8, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x1c, 0x30, 0xd5, 0x4a,
	0x0e, 0x5c, 0x62, 0x41, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x61, 0x89, 0x39, 0x99, 0x29, 0x89, 0x25,
	0xa9, 0x70, 0x5d, 0x6a, 0x5c, 0x7c, 0xa8, 0x32, 0x50, 0xbd, 0x7c, 0x45, 0x28, 0xa2, 0x4a, 0x86,
	0x5c, 0x82, 0x10, 0x75, 0x6e, 0x99, 0x15, 0x70, 0xcd, 0x32, 0x5c, 0x9c, 0x70, 0x41, 0xa8, 0x3e,
	0xce, 0x22, 0x98, 0x80, 0x51, 0x3a, 0x17, 0x3f, 0x4c, 0x65, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72,
	0xaa, 0x90, 0x1e, 0x17, 0x07, 0xcc, 0x44, 0x21, 0x4e, 0x3d, 0x98, 0xac, 0x94, 0xb8, 0x1e, 0x0e,
	0xd7, 0xa9, 0x70, 0x31, 0xbb, 0x65, 0x56, 0x20, 0x2b, 0x15, 0xd2, 0xc3, 0x70, 0x46, 0x12, 0x1b,
	0x38, 0x30, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x10, 0x81, 0xe7, 0x1e, 0x01, 0x00,
	0x00,
}
